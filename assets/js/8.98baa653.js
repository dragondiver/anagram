(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{405:function(a,t,e){"use strict";e.r(t);var s=e(56),o=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"finding-the-best-solution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#finding-the-best-solution"}},[a._v("#")]),a._v(" Finding the Best Solution")]),a._v(" "),e("h2",{attrs:{id:"the-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-problem"}},[a._v("#")]),a._v(" The Problem")]),a._v(" "),e("p",[a._v("Given an input file which contains one word per line, as an output construct a list of all anagrams from that input file. Print those words to the console, where all words that are an anagram should each other should be on the same line.")]),a._v(" "),e("h3",{attrs:{id:"sharpening-the-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sharpening-the-problem"}},[a._v("#")]),a._v(" Sharpening the problem")]),a._v(" "),e("h4",{attrs:{id:"main-topics-in-approach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-topics-in-approach"}},[a._v("#")]),a._v(" Main Topics in Approach")]),a._v(" "),e("h5",{attrs:{id:"where-to-store-the-anagrams-collection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#where-to-store-the-anagrams-collection"}},[a._v("#")]),a._v(" Where to store the anagrams collection")]),a._v(" "),e("p",[a._v("As long as we do have enough memory, the obvious solution is a map, with larger amounts of words, an appropriate solution would be a database of some kind, that is able to handle the amount of data.")]),a._v(" "),e("h5",{attrs:{id:"how-to-identify-an-anagram"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-identify-an-anagram"}},[a._v("#")]),a._v(" How to identify an anagram?")]),a._v(" "),e("p",[a._v("Two words are defined as anagrams if they do share the same letters, but are in a different order (i.e. the English words race and care are anagrams).\nImmediate solutions would be to sort the characters and use the string of sorted char as key.")]),a._v(" "),e("p",[a._v("To be able to identify a colection of anagrams, we need a key. But because sorting is expensive, an other solution could be to calculate the hashcode of a word by calculating the product of each character mapping prime. This works since the product of 2 primes is unique from the products of any other primes. I tested the performance in the exploration sub project.")]),a._v(" "),e("p",[a._v("To make sure to find the anagrams, i added code to extract special characters and blanks from the lines.")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[a._v("word"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("toLowerCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("replaceAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[^\\\\p{IsAlphabetic}\\\\p{IsDigit}]"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),e("p",[a._v("This code was not examined for performance to reduce the problem.")])])}),[],!1,null,null,null);t.default=o.exports}}]);